alias userSP R1;
alias sysnum R2;
alias file R12;
alias ret R15;
userSP = SP;
//print "eeeee";
breakpoint;
alias pte R14;
pte = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;
ret = [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512;

PTBR = [pte + 14];
sysnum = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];
file = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

[pte + 9] = sysnum;

[pte + 13] = SP;
SP = [pte + 11]*512 - 1;

if(sysnum == 2) then
alias p R4;
alias q R5;

p = 0;
q = [pte + 11]*512 + 496;

while(p < 8) do
if([q + p*2] == -1) then
break;
endif;
p = p + 1;
endwhile;

//print sysnum;
//print file;
//print p;
if(p == 8) then
[pte + 9] = 0;
SP = [pte + 13];
[ret] = -3;
ireturn;
endif;

multipush(R0,R1,R2,R3,R4,R5,R6,R12,R13,R15);
alias funnum R1;
alias filename R2;

funnum = 3;
filename = file; 
call MOD_3;
alias retvalue R0;
alias index R11;
index = retvalue;
//print "ffff";
print index;
if(retvalue < 0) then
[pte + 9] = 0;
SP = [pte + 13];
[ret] = retvalue;
ireturn;
endif;

multipop(R0,R1,R2,R3,R4,R5,R6,R12,R13,R15);

[q + p*2] = 0;
//print index;
[q + p*2 + 1] = index;

SP = [pte + 13];
[ret] = p;
[pte + 9] = 0;
//print "gggg";
ireturn; 
endif;

if(sysnum == 3) then
alias p R4;
alias q R5;

p = file;
q = [pte + 11]*512 + 496;

if(p>7 || p<0 || [q + p*2] != 0) then
[pte + 9] = 0;
SP = [pte + 13];
[ret] = -1;
ireturn;
endif;

alias oftindex R6;
oftindex = [q + p*2 + 1];

multipush(R0,R1,R2,R3,R4,R5,R6,R12,R13,R15);
alias funnum R1;
alias index R3;

funnum = 4;
index = oftindex; 
call MOD_3;
multipop(R0,R1,R2,R3,R4,R5,R6,R12,R13,R15);

[q + p*2] = -1;
[q + p*2 + 1] = -1;

[pte + 9] = 0;
SP = [pte + 13];
[ret] = 0;
ireturn;
endif;

if(sysnum == 6) then
//print "aaaa";
alias fileid R3;
alias offset R4;
alias q R5;

fileid = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];
offset = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];

q = [pte + 11]*512 + 496;


if([q + fileid*2] != 0 || fileid<0 || fileid>7 ) then
[pte + 9] = 0;
SP = [pte + 13];
[ret] = -1;
ireturn;
endif;

alias often R6;
alias inodein R13;
often = [q + fileid*2 + 1];
inodein = [OPEN_FILE_TABLE + often*4];


multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);
alias funnum1 R1;
alias pid1 R2;
alias index1 R3;
funnum1 = 4;
pid1 = [SYSTEM_STATUS_TABLE + 1];
index1 = inodein;
call MOD_0;
alias retvalue1 R0;

//print "Tarun";
breakpoint;

if(retvalue1 == -1) then
[pte + 9] = 0;
SP = [pte + 13];
[ret] = -1;
ireturn;
endif;

multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);

alias lseek R7;
lseek = [OPEN_FILE_TABLE + often*4 + 2];

alias filesize R8; 
filesize = [INODE_TABLE + inodein*16 + 2];
if(inodein == INODE_ROOT) then
filesize = 480;
endif;

if(lseek + offset < 0) then
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);
	alias funnum2 R1;
	alias pid2 R2;
	alias index2 R3;
	funnum2 = 5;
	pid2 = [SYSTEM_STATUS_TABLE + 1];
	index2 = inodein;
	call MOD_0; 
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);
[pte + 9] = 0;
SP = [pte + 13];
[ret] = -2;
ireturn;
endif;

if(offset == 0) then
[OPEN_FILE_TABLE + often*4 + 2] = 0;


else 
if(lseek + offset > filesize) then
[OPEN_FILE_TABLE + often*4 + 2] = filesize;

else
[OPEN_FILE_TABLE + often*4 + 2] = lseek + offset;
endif;
endif;
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);
	alias funnum3 R1;
	alias pid3 R2;
	alias index3 R3;
	funnum3 = 5;
	pid3 = [SYSTEM_STATUS_TABLE + 1];
	index3 = inodein;
	call MOD_0; 
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R13,R15);

	[pte + 9] = 0;
	SP = [pte + 13];
	[ret] = 0;
//print "jdkjadh";
breakpoint;
	ireturn;
endif;
