breakpoint;
alias userSP R7;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11] * 512 - 1;
backup;
SP = SP + 1;
[SP] = EIP;
PTBR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 14];
PTLR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 15];
if(EC != 0 || userSP >= (PTLR*512 - 1)) then
print "Exception";
print EC;
print EIP;
print EPN;
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
alias funnum R1;
alias currentPID R2;
funnum = 3;
currentPID = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);

multipush(R0,R1,R2,R3,R4,R5,R6,R7);
call MOD_5;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
endif;

if(EPN >= 4 && EPN <= 7) then
multipush(R0,R1,R2,R3,R4,R5,R6);
alias funnum1 R1;
alias blocknum R2;
funnum1 = 5;
blocknum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
call MOD_2;
alias retvalue R0;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2] = retvalue;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2 + 1] = "1100";
multipop(R0,R1,R2,R3,R4,R5,R6);
endif;

if(EPN >= 2 && EPN <= 3) then
alias p R7;
p = 2;
while(p < 4) do
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
alias funnum2 R1;
funnum2 = 1;
call MOD_2;
alias retvalue R0;
print retvalue;
print p;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + p*2] = retvalue;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + p*2 + 1] = "1110";
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
print p;
p = p + 1;
endwhile;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
EIP = [SP];
SP = SP - 1;
restore;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
SP = SP + 1;
[[PTBR + (SP/512)*2]*512 + (SP%512)] = EIP;
//[SP] = EIP;
ireturn;
