alias funnum R1;
alias currentPID R2;

if(funnum == 1) then
alias retvalue R0;
alias p R3;
p = 0;
while(p < 16) do
if([PROCESS_TABLE + p*16 + 4] == TERMINATED) then
break;
endif;
p = p + 1;
endwhile;
if(p == 16) then
retvalue = -1;
return;
endif;

alias pte R4;
pte = PROCESS_TABLE + p*16;
[pte + 4] = ALLOCATED;
[pte + 1] = p;
[pte + 14] = PAGE_TABLE_BASE + p*20;
[pte + 15] = 10;
retvalue = p;
//print retvalue;
breakpoint;
return;
endif;

if(funnum == 2) then
alias p R4;
alias q R5;
q = [PROCESS_TABLE + currentPID* 16 + 11]*512 + 496;
p = 0;
while(p < 8) do
if([q + p*2] == 1) then
multipush(R1,R2,R3,R4,R5);
alias funnum R1;
alias semid R3;
funnum = 7;
semid = p;
//print "aaaaaaaaaaa";
call MOD_0;
multipop(R1,R2,R3,R4,R5);
endif;

if([q + p*2] == 0) then
multipush(R0,R1,R2,R3,R4,R5);
alias funnum2 R1;
alias fileid R3;
funnum2 = 4;
fileid = [q + p*2 + 1];
call MOD_3;
multipop(R0,R1,R2,R3,R4,R5);
endif;

p = p +1;
endwhile;

multipush(R1,R2,R3,R4,R5);
alias funnum1 R1;
alias userpagenum R2;
funnum1 = 2;
userpagenum = [PROCESS_TABLE + currentPID * 16 + 11];
//print funnum1;
call MOD_2;
multipop(R1,R2,R3,R4,R5);
//print currentPID;
return;
endif;

if(funnum == 3) then
alias p R4;
if([PROCESS_TABLE + currentPID*16 + 9] != 9) then
p = 0;
alias pte R5;

while(p < 16) do
pte = PROCESS_TABLE + p*16;
if([pte + 4] == WAIT_PROCESS && [pte + 5] == currentPID) then
[pte + 4] = READY;
[pte + 5] = -1;
if([pte + 2] == currentPID) then
[pte + 2] = -1; 
endif;
endif;
p = p + 1;
endwhile;
endif;

multipush(R1,R2,R3,R4,R5);
alias funnum1 R1;
alias currentPID1 R2;
funnum1 = 4;
currentPID1 = [SYSTEM_STATUS_TABLE + 1];
//print funnum1;
call MOD_1;
multipop(R1,R2,R3,R4,R5);

multipush(R1,R2,R3,R4,R5);
alias funnum2 R1;
alias currentPID2 R2;
funnum2 = 2;
currentPID2 = [SYSTEM_STATUS_TABLE + 1];
//print funnum2;
call MOD_1;
multipop(R1,R2,R3,R4,R5);
[PROCESS_TABLE + currentPID * 16 + 4] = TERMINATED;
return;
endif;

if(funnum == 4) then
alias p R3;
p = 2;
PTBR = [PROCESS_TABLE + currentPID*16 + 14];
[PTBR + 0] = -1;
[PTBR + 1] = "0000";
[PTBR + 2] = -1;
[PTBR + 3] = "0000";
while(p < 10) do
if([PTBR + 2*p] != -1) then
multipush(R1,R2,R3,R4,R5);
alias funnum3 R1;
alias pagenum R2;
funnum3 = 2;
//print funnum3;
pagenum = [PTBR + 2*p];
call MOD_2;
multipop(R1,R2,R3,R4,R5);
[PTBR + 2*p] = -1;
[PTBR + 2*p + 1] ="0000";
endif;
p = p + 1;
endwhile;
alias disk_map R4;
disk_map = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
alias q R5;
q = 2;
while(q < 10) do
if([disk_map + q] != -1) then
multipush(R1,R2,R3,R4,R5);
alias funnum4 R1;
alias blocknum R2;
funnum4 = 4;
blocknum = [disk_map + q];
call MOD_2;
multipop(R1,R2,R3,R4,R5);
endif;
if(q == 3) then
q = q + 5;
else
q = q + 1;
endif;
endwhile;

q = 0;
while(q < 10) do
[disk_map + q] = -1;
q = q + 1;
endwhile;
return;
endif;

if(funnum == 5) then
alias p R3;
p = 0;
while(p < 60) do
	if([INODE_TABLE + p*16 + 1] != -1) then
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	alias funnum1 R1;
	alias pid1 R2;
	alias index1 R3;
	funnum1 = 4;
	pid1 = [SYSTEM_STATUS_TABLE + 1];
	index1 = p;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	endif;
p = p + 1;
endwhile;

p = 2;
while(p < 16) do
	if(p != [SYSTEM_STATUS_TABLE + 1] && [PROCESS_TABLE + p*16 + 4] != TERMINATED) then
	multipush(R1,R2,R3,R4,R5,R6);
	alias funnum2 R1;
	alias pid2 R2;
	funnum2 = 3;
	pid2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	multipop(R1,R2,R3,R4,R5,R6);
	endif;
p = p + 1;
endwhile;

p = 0;
while(p < 60) do
	if([INODE_TABLE + p*16 + 1] != -1) then
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = p;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	endif;
p = p + 1;
endwhile;
return;
endif;
