alias funnum R1;
alias currentPID R2;

if(funnum == 1) then
alias retvalue R0;
alias p R3;
p = 0;
while(p < 16) do
if([PROCESS_TABLE + p*16 + 4] == TERMINATED) then
break;
endif;
p = p + 1;
endwhile;
if(p == 16) then
retvalue = -1;
return;
endif;

[PROCESS_TABLE + p*16 + 4] = ALLOCATED;
[PROCESS_TABLE + p*16 + 1] = p;
[PROCESS_TABLE + p*16 + 14] = PAGE_TABLE_BASE + p*20;
[PROCESS_TABLE + p*16 + 15] = 10;
retvalue = p;
//print retvalue;
breakpoint;
return;
endif;

if(funnum == 2) then
multipush(R0,R1,R2,R3,R4);
alias funnum1 R1;
alias userpagenum R2;
funnum1 = 2;
userpagenum = [PROCESS_TABLE + currentPID * 16 + 11];
//print funnum1;
call MOD_2;
multipop(R0,R1,R2,R3,R4);
//print currentPID;
return;
endif;

if(funnum == 3) then
multipush(R0,R1,R2,R3,R4);
alias funnum1 R1;
alias currentPID1 R2;
funnum1 = 4;
currentPID1 = currentPID;
//print funnum1;
call MOD_1;
multipop(R0,R1,R2,R3,R4);

multipush(R0,R1,R2,R3,R4);
alias funnum2 R1;
alias currentPID2 R2;
funnum2 = 2;
currentPID2 = currentPID;
//print funnum2;
call MOD_1;
multipop(R0,R1,R2,R3,R4);
[PROCESS_TABLE + currentPID * 16 + 4] = TERMINATED;
return;
endif;

if(funnum == 4) then
alias p R3;
p = 2;
PTBR = [PROCESS_TABLE + currentPID*16 + 14];
[PTBR + 0] = -1;
[PTBR + 1] = "0000";
[PTBR + 2] = -1;
[PTBR + 3] = "0000";
while(p < 10) do
if([PTBR + 2*p] != -1) then
multipush(R0,R1,R2,R3,R4);
alias funnum3 R1;
alias pagenum R2;
funnum3 = 2;
//print funnum3;
pagenum = [PTBR + 2*p];
call MOD_2;
multipop(R0,R1,R2,R3,R4);
[PTBR + 2*p] = -1;
[PTBR + 2*p + 1] ="0000";
endif;
p = p + 1;
endwhile;
alias disk_map R4;
disk_map = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
alias q R5;
q = 2;
while(q < 10) do
if([disk_map + q] != -1) then
multipush(R0,R1,R2,R3,R4,R5);
alias funnum4 R1;
alias blocknum R2;
funnum4 = 4;
blocknum = [disk_map + q];
call MOD_2;
multipop(R0,R1,R2,R3,R4,R5);
endif;
if(q == 3) then
q = q + 5;
else
q = q + 1;
endif;
endwhile;
[disk_map + 0] = -1;
[disk_map + 1] = -1;
[disk_map + 2] = -1;
[disk_map + 3] = -1;
[disk_map + 4] = -1;
[disk_map + 5] = -1;
[disk_map + 6] = -1;
[disk_map + 7] = -1;
[disk_map + 8] = -1;
[disk_map + 9] = -1;

return;
endif;


